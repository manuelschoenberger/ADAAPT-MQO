package mqo_chimera.dwave;

import static org.junit.Assert.*;
import mqo_chimera.benchmark.BenchmarkConfiguration;
import mqo_chimera.benchmark.GenerateTestcases;
import mqo_chimera.benchmark.TestcaseClass;
import mqo_chimera.solver.cplex.LinearSolver;
import mqo_chimera.mapping.ChimeraMqoMapping;
import mqo_chimera.testcases.MqoSolution;
import mqo_chimera.testcases.QuadraticMqoSolution;
import mqo_chimera.util.TestUtil;

import org.junit.Test;

public class DwavePreprocessingTest {

	@Test
	public void test() throws Exception {
		// Change benchmark configuration for this test
		BenchmarkConfiguration.nrTestcases = 2;
		BenchmarkConfiguration.nrTransformations = 2;
		BenchmarkConfiguration.testcaseClasses = new TestcaseClass[] {
			new TestcaseClass(50, 2, false)
		};
		// Generate test cases
		GenerateTestcases.main(null);
		// Perform preprocessing
		DwavePreprocessing.main(null);
		// Generate linear solver
		LinearSolver solver = new LinearSolver();
		// Iterate over test classes
		for (TestcaseClass testClass : BenchmarkConfiguration.testcaseClasses) {
			// Generate path to file storing performance information
			String configurationID = testClass.configurationID();
			// Iterate over test cases
			for (int testcaseCtr=0; testcaseCtr<BenchmarkConfiguration.nrTestcases; ++testcaseCtr) {
				// Generate path to test case
				String testcasePath = "mqo/testcases/" + configurationID + "T" + testcaseCtr;
				// Read test case from disc
				ChimeraMqoMapping originalQuboMapping = ChimeraMqoMapping.readMapping(testcasePath);
				// Solve original test case
				MqoSolution originalSolution = solver.solve(originalQuboMapping.problem);
				// Iterate over gauge transformations
				for (int transformationCtr=0; transformationCtr<BenchmarkConfiguration.nrTransformations; ++transformationCtr) {
					// Generate file name of preprocessed mapping
					String isingPath = "mqo/dwave/" + configurationID + "_ising" + "_T" + testcaseCtr + "_G" + transformationCtr;
					// Read weights generated by preprocessing
					ChimeraMqoMapping transformedIsingMapping = ChimeraMqoMapping.weightsFromFile(isingPath, originalQuboMapping);
					// Solve transformed problem as Ising problem
					QuadraticMqoSolution transformedIsingSolution = solver.solveChimeraIsing(transformedIsingMapping);
					// Obtain the transformation
					boolean[] transformation = originalQuboMapping.gaugeTransformations[transformationCtr];
					// Transform solution values back
					boolean[] isingSpinValues = QuadraticMqoSolution.qubitValuesTransformedBack(
							transformedIsingSolution.qubitValues, transformation);
					// Create solution using re-transformed values
					QuadraticMqoSolution isingSolution = new QuadraticMqoSolution(originalQuboMapping, isingSpinValues);
					// Assert consistency
					assertEquals(isingSolution.executionCost, originalSolution.executionCost, TestUtil.DOUBLE_TOLERANCE);
				}
			}
		}
	}

}
